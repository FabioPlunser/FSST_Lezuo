// unsigned char* encryption_setup(unsigned char* key, unsigned char* iv, unsigned char* plaintext)
// {
//     int ciphertext_len;
//     unsigned char ciphertext[128];
//     ciphertext_len = do_encrypt(plaintext, strlen((char *)plaintext), key, iv, ciphertext);
//     for(int i = 0; i<ciphertext_len; i++)
//     {
//         printf("Ciphertext: %X", ciphertext[i]);
//     }

//     // unsigned char *ciphertext;
// //     AES_KEY enc_key;
// //     AES_set_encrypt_key(key, sizeof(key)*8, &enc_key);
// //     // AES_cbc_encrypt(Plaintext, ciphertext, sizeof(Plaintext), &enc_key, IV, AES_ENCRYPT);
// //     AES_cbc_encrypt(Plaintext, ciphertext, sizeof(Plaintext), &enc_key, iv, AES_ENCRYPT);
// }


// unsigned char* decryption_setup(char* key, char* iv, unsigned char* ciphertext)
// {
     
//     int decryptedtext_len, ciphertext_len;
//     unsigned char decryptedtext[128];

//     char temp[2];
//     unsigned char ciphertext_temp[128]={0};
//     int x = 0;
//     for(int i; i<strlen(ciphertext); i++)
//     {
//         temp[0] = ciphertext[i];
//         temp[1] = ciphertext[++i];
//         temp[2] = '\0';
//         ciphertext_temp[x] = (unsigned int)strtol(temp, NULL, 16);
//         x++;
//     }

    
//     // unsigned char decryptedtext[128];
//     // decryptedtext_len = do_decrypt(Ciphertext_temp, sizeof(Ciphertext_temp)/4, key, iv, decryptedtext);
//     // decryptedtext[decryptedtext_len] = '\0';
//     // printf("EVP: Decrypted test is: %s\n", decryptedtext);

//     AES_KEY dec_key;
//     AES_set_decrypt_key(key, sizeof(key)*8, &dec_key);
//     AES_cbc_encrypt(ciphertext_temp, decryptedtext, sizeof(ciphertext_temp)/4, &dec_key, iv, AES_DECRYPT);
//     printf("AES_KEY:\nDecrypted test is: %s\n", decryptedtext);    
// }


// unsigned char* key = malloc(16); 
    // unsigned char* iv = malloc(16);
    // unsigned char* Plaintext = malloc(128);
    // unsigned char* Ciphertext = malloc(128);

    // int choose;
    // printf("AES-128, encrypt und decrypt\n\n");
    // printf("1 für encrypt\n2 für decrypt\n");
    // scanf("%i", &choose);
    
    // if(choose == 1)
    // {
    //     printf("Key: ");
    //     scanf("%s", key);

    //     printf("IV: ");
    //     scanf("%s", iv);

    //     printf("Text der zu encrypten ist: ");
    //     scanf("%s", Plaintext);
    //     printf("\n\n");
    //     unsigned char* ciphertext_output = encryption_setup(key, iv, Plaintext);
    //     printf("Ciphertext laenge: %li\n", strlen(ciphertext_output));
    //     printf("Der Encryptete Ciphertext lautet:\n");
    //     for(int i=0; i<strlen(ciphertext_output); i++)
    //     {
    //         printf("%X", ciphertext_output[i]);
    //     }
    //     printf("\n");
       
    //     BIO_dump_fp (stdout, (const char *)ciphertext_output, strlen(ciphertext_output));

    // }
    // if(choose == 2)
    // {
    //     printf("Key: ");
    //     scanf("%s", key);

    //     printf("IV: ");
    //     scanf("%s", iv);

    //     printf("Ciphertext: ");
    //     scanf("%s", Ciphertext);
    //     unsigned char* plaintext_output = decryption_setup(key, iv, Ciphertext);
    //     if(plaintext_output == NULL){
    //         printf("Entschluesellung hat nicht funktioniert\n\n\n");  
    //         main(); 
    //     }
    //     printf("Der Plaintext lautet: %s\n", plaintext_output);
    // }
    // printf("Nichts ausgewählt\n");
